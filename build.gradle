plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.14'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
}

group = 'com.bookbla'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.5")
}

dependencies {
    // spring boot
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // openfeign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // SWAGGER
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.7.0'

    // GSON
    implementation 'com.google.code.gson:gson'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    //JWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // DB
    implementation 'mysql:mysql-connector-java:8.0.31'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'

    //QueryDSL
    implementation "com.querydsl:querydsl-jpa:5.0.0"
    implementation "com.querydsl:querydsl-apt:5.0.0"

    // bcrypt
    implementation 'org.mindrot:jbcrypt:0.4'

    // firebase
    implementation 'com.google.firebase:firebase-admin:9.2.0'
    implementation 'com.google.guava:guava:33.1.0-jre'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'

    // expo
    implementation 'io.github.jav:expo-server-sdk:1.1.0'

    //test
    testImplementation 'io.rest-assured:rest-assured:4.4.0'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //비속어
    implementation 'io.github.vaneproject:badwordfiltering:1.0.0'

    // google api
    implementation 'com.google.apis:google-api-services-androidpublisher:v3-rev20240109-2.0.0'
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.20.0'
    implementation 'com.google.http-client:google-http-client-gson:1.43.3'

    // apple appstore
    implementation 'com.apple.itunes.storekit:app-store-server-library:3.1.0'

    // sendbird
    implementation "org.sendbird:sendbird-platform-sdk:1.0.23"

    // datadog
    implementation group: 'com.datadoghq', name: 'dd-trace-api', version: '1.21.0'
}

allprojects {
    repositories {
        maven { url "https://repo.sendbird.com/public/maven" }
    }
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// plain jar 생성 방지
tasks.named("jar") {
    enabled = false
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

tasks.register('copyExternalProperties', Copy) {
    from "./americano-config"
    include "*.yml"
    into "src/main/resources"
}

processResources.dependsOn('copyExternalProperties')
processTestResources.dependsOn('copyExternalProperties')